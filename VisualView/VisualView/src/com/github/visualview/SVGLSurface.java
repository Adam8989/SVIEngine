/* * Copyright (C) 2013 SVV. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.github.visualview;import com.github.sviengine.glsurface.SVIGLSurface;import com.github.sviengine.slide.SVISlide;import android.content.Context;import android.view.MotionEvent;import android.view.SurfaceHolder;import android.view.SurfaceHolder.Callback;import android.widget.FrameLayout;/** *  This class provides the drawing surface functionality for the Visual View package. It extends Android's GLSurfaceView and lets the Visual View package render using OpenGL ES 2.0. *  */public class SVGLSurface extends FrameLayout{	SVIGLSurface mSAGLSurface;	private SVSlide mRootSlide = null;	private boolean mTranslucent = true;	private int mDepth = 8;	private int mStencil = 8;	private SurfaceHolder mHolder;			/**	 * Creates an instance of SVGLSurface.<p>	 * The default attribute values are:<p>	 * 	<li>Translucent: set to true<p>	 *  <li>Depth buffer: 8<p>	 *  <li>Stencil buffer: 8<p>	 * 		 * 	 *@param context Context for your application.	 */	public SVGLSurface(Context context) {		super(context);						mSAGLSurface = new SVIGLSurface(context);		this.addView(mSAGLSurface);		mHolder = mSAGLSurface.getHolder();	    if(mHolder != null){	    		    	mHolder.addCallback(new Callback() {								@Override				public void surfaceDestroyed(SurfaceHolder holder) {					onSurfaceDestroyed(holder);				}								@Override				public void surfaceCreated(SurfaceHolder holder) {					onSurfaceCreated(holder);				}								@Override				public void surfaceChanged(SurfaceHolder holder, int format, int width,						int height) {					onSurfaceChanged(holder, format, width, height);				}			});	    }	    		if( mRootSlide == null ) {			SVColor color = new SVColor(0.0f, 0.0f, 0.0f, 1.0f);			mRootSlide = new SVSlide(null, 0.0f, 0.0f, 1, 1, color);			SVISlide.nativeSetRootSlideSVISlide(mRootSlide.getSlideHandle());		}				if(mSAGLSurface != null){			mSAGLSurface.initialize(mTranslucent, mDepth, mStencil);		}				setFpsLogEnabled(false);			}		/**	 * Creates an instance of SVGLSurface with the specified initialization values.<p>	 * This function can set GLSurface's parameter user self.	 * 	 * @param context Context for your application.	 * @param translucent Set to true to use pixel format; set to false to use no format.	 * @param depth The Depth buffer	 * @param stencil The Stencil buffer.	 * 	 */	public SVGLSurface(Context context, boolean translucent, int depth, int stencil) {		super(context);				mSAGLSurface = new SVIGLSurface(context);		this.addView(mSAGLSurface);		mHolder = mSAGLSurface.getHolder();	    if(mHolder != null){	    	mHolder.addCallback(new Callback() {								@Override				public void surfaceDestroyed(SurfaceHolder holder) {					onSurfaceDestroyed(holder);				}								@Override				public void surfaceCreated(SurfaceHolder holder) {					onSurfaceCreated(holder);				}								@Override				public void surfaceChanged(SurfaceHolder holder, int format, int width,						int height) {					onSurfaceChanged(holder, format, width, height);				}			});	    }	    		if( mRootSlide == null ) {			SVColor color = new SVColor(0.0f, 0.0f, 0.0f, 1.0f);			mRootSlide = new SVSlide(null, 0.0f, 0.0f, 1, 1, color);			SVISlide.nativeSetRootSlideSVISlide(mRootSlide.getSlideHandle());		}				mTranslucent = translucent;		mDepth = depth;		mStencil = stencil;				if(mSAGLSurface != null){			mSAGLSurface.initialize(mTranslucent, mDepth, mStencil);		}				setFpsLogEnabled(false);			}				/**	 *Called when an intercept hover event occurs. 	 *You can override this method to handle the intercept hover events before they are handled by child views.	 *	 *@param event Android Motion Event	 *@return boolean �?	true �? if the event occurs on the surface, false otherwise.	 *                	 */	@Override	public boolean onInterceptTouchEvent(MotionEvent event){				if(mSAGLSurface != null){			return mSAGLSurface.onTouchEvent(event);		}				return false;	}			/**	 * Called when an activity pauses.	 * 	 * @see android.opengl.GLSurfaceView#onPause()	 */		public void onPause() {		if(mSAGLSurface != null)		{			mSAGLSurface.onPause();		}	}		/**	 * Called when an activity resumes.	 * 	 * @see android.opengl.GLSurfaceView#onResume()	 */		public void onResume() {		if(mSAGLSurface != null)		{			mSAGLSurface.onResume();		}	}			/**	 * Called when a touch event occurs on the surface.	 *	 * @return boolean if SVGlSurface == null :: true	 */	@Override	public boolean onTouchEvent(MotionEvent event) {		if(mSAGLSurface != null)		{			mSAGLSurface.onTouchEvent(event);		}		return true;	}			/**	 * Enable or disable FPS logging.	 * You can view the logs using the log reader provided by Eclipse ADT.	 * 	 * @param enabled Set to true to enable FPS logging, set to false to disable FPS logging.	 */	public void setFpsLogEnabled(boolean enabled){		if(mSAGLSurface != null)		{			mSAGLSurface.enableLogFPS(enabled);		}	}	/**	 * Add the specified slide to Root, the topmost view in the view hierarchy.	 *	 * @param subSlide The slide to add to the view hierarchy.	 * @throws IllegalArgumentException if the input sub slide argument is null.	 */	public void addSlide(SVSlide subSlide){		if(mRootSlide != null)			mRootSlide.addSubSlide(subSlide);	}	/**	 * Remove the specified slide from Root, the topmost view in the view hierarchy.	 *	 * @param subSlide The slide to remove from the view hierarchy.	 */	public void removeSubSlide(SVSlide subSlide){		if(mRootSlide.getSubSlideCount() == 0)			return;				for(int i = 0; i < mRootSlide.getSubSlideCount(); i++){			SVSlide slide = mRootSlide.getSubSlide(i);			if(slide == subSlide){				mRootSlide.removeSlide(slide);			}		}	}				/**	 * Called when a surface is created.	 * 	 * @param holder SurfaceHolder that contains the surface created.	 * 	 */	public void onSurfaceCreated(SurfaceHolder holder) {			}			/**	 *Called when a surface is destroyed.	 * 	 * @param holder SurfaceHolder that contains the surface created.	 * 	 */	public void onSurfaceDestroyed(SurfaceHolder holder) {			}		/**	 * Called when any structural changes (format or size) are made to the surface.	 * Update the image in the surface in the event handling. This method is always called at least once after surface creation.	 * 	 * @param holder SurfaceHolder that contains the surface.	 * @param format The Surface format	 * @param width The Surface width	 * @param height The Surface height	 */	public void onSurfaceChanged(SurfaceHolder holder, int format, int width,			int height) {			}			}